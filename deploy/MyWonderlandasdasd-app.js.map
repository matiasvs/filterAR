{
  "version": 3,
  "sources": ["../app.js"],
  "sourcesContent": ["/**\n * /!\\ This file is auto-generated.\n *\n * This is the entry point of your standalone application.\n *\n * There are multiple tags used by the editor to inject code automatically:\n *     - `wle:auto-constants:start` and `wle:auto-constants:end`: The project's constants,\n *        such as the project's name, whether it should use the physx runtime, etc...\n *     - `wle:auto-benchmark:start` and `wle:auto-benchmark:end`: Append the benchmarking code\n */\n\nimport {loadRuntime} from '@wonderlandengine/api';\n\n/* wle:auto-constants:start */\nconst Constants = {\n    ProjectName: 'MyWonderlandasdasd',\n    RuntimeBaseName: 'WonderlandRuntime',\n    WebXRRequiredFeatures: ['local',],\n    WebXROptionalFeatures: ['local','hand-tracking','hit-test',],\n};\nconst RuntimeOptions = {\n    physx: false,\n    loader: false,\n    xrFramebufferScaleFactor: 1,\n    xrOfferSession: {\n        mode: 'auto',\n        features: Constants.WebXRRequiredFeatures,\n        optionalFeatures: Constants.WebXROptionalFeatures,\n    },\n    canvas: 'canvas',\n};\n/* wle:auto-constants:end */\n\nconst engine = await loadRuntime(Constants.RuntimeBaseName, RuntimeOptions);\nengine.onLoadingScreenEnd.once(() => {\n    const el = document.getElementById('version');\n    if (el) setTimeout(() => el.remove(), 2000);\n});\n\n/* WebXR setup. */\n\nfunction requestSession(mode) {\n    engine\n        .requestXRSession(mode, Constants.WebXRRequiredFeatures, Constants.WebXROptionalFeatures)\n        .catch((e) => console.error(e));\n}\n\nfunction setupButtonsXR() {\n    /* Setup AR / VR buttons */\n    const arButton = document.getElementById('ar-button');\n    if (arButton) {\n        arButton.setAttribute('data-supported', engine.arSupported.toString());\n        arButton.addEventListener('click', () => requestSession('immersive-ar'));\n    }\n    const vrButton = document.getElementById('vr-button');\n    if (vrButton) {\n        vrButton.setAttribute('data-supported', engine.vrSupported.toString());\n        vrButton.addEventListener('click', () => requestSession('immersive-vr'));\n    }\n}\n\nif (document.readyState === 'loading') {\n    window.addEventListener('load', setupButtonsXR);\n} else {\n    setupButtonsXR();\n}\n\n/* Load main scene */\ntry {\n    await engine.loadMainScene(`${Constants.ProjectName}.bin`);\n} catch (e) {\n    console.error(e);\n    window.alert(`Failed to load ${Constants.ProjectName}.bin:`, e);\n}\n\n/* wle:auto-benchmark:start */\n/* wle:auto-benchmark:end */\n"],
  "mappings": ";AAWA,SAAQ,mBAAkB;AAG1B,IAAM,YAAY;AAAA,EACd,aAAa;AAAA,EACb,iBAAiB;AAAA,EACjB,uBAAuB,CAAC,OAAQ;AAAA,EAChC,uBAAuB,CAAC,SAAQ,iBAAgB,UAAW;AAC/D;AACA,IAAM,iBAAiB;AAAA,EACnB,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,0BAA0B;AAAA,EAC1B,gBAAgB;AAAA,IACZ,MAAM;AAAA,IACN,UAAU,UAAU;AAAA,IACpB,kBAAkB,UAAU;AAAA,EAChC;AAAA,EACA,QAAQ;AACZ;AAGA,IAAM,SAAS,MAAM,YAAY,UAAU,iBAAiB,cAAc;AAC1E,OAAO,mBAAmB,KAAK,MAAM;AACjC,QAAM,KAAK,SAAS,eAAe,SAAS;AAC5C,MAAI;AAAI,eAAW,MAAM,GAAG,OAAO,GAAG,GAAI;AAC9C,CAAC;AAID,SAAS,eAAe,MAAM;AAC1B,SACK,iBAAiB,MAAM,UAAU,uBAAuB,UAAU,qBAAqB,EACvF,MAAM,CAAC,MAAM,QAAQ,MAAM,CAAC,CAAC;AACtC;AAEA,SAAS,iBAAiB;AAEtB,QAAM,WAAW,SAAS,eAAe,WAAW;AACpD,MAAI,UAAU;AACV,aAAS,aAAa,kBAAkB,OAAO,YAAY,SAAS,CAAC;AACrE,aAAS,iBAAiB,SAAS,MAAM,eAAe,cAAc,CAAC;AAAA,EAC3E;AACA,QAAM,WAAW,SAAS,eAAe,WAAW;AACpD,MAAI,UAAU;AACV,aAAS,aAAa,kBAAkB,OAAO,YAAY,SAAS,CAAC;AACrE,aAAS,iBAAiB,SAAS,MAAM,eAAe,cAAc,CAAC;AAAA,EAC3E;AACJ;AAEA,IAAI,SAAS,eAAe,WAAW;AACnC,SAAO,iBAAiB,QAAQ,cAAc;AAClD,OAAO;AACH,iBAAe;AACnB;AAGA,IAAI;AACA,QAAM,OAAO,cAAc,GAAG,UAAU,iBAAiB;AAC7D,SAAS,GAAP;AACE,UAAQ,MAAM,CAAC;AACf,SAAO,MAAM,kBAAkB,UAAU,oBAAoB,CAAC;AAClE;",
  "names": []
}
